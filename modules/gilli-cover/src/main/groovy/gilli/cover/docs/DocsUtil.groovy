package gilli.cover.docs

import gilli.cover.CoverMain
import groovy.transform.stc.ClosureParams
import groovy.transform.stc.FromString
import groovy.transform.stc.SimpleType

class DocsUtil {
    static File autoGeneratedFilePath(String filename) {
        new File(CoverMain.projectDir, "docs/_includes/auto_generated/$filename")
    }

    static String cellValue(Object val)
    {
        val ?: '-'
    }

    static void writeTableRow(BufferedWriter writer, List row)
    {
        writer.write('| ')
        row.each {

            String rowString = cellValue(it) + " | "
            writer.write(rowString)
        }

        writer.newLine()
    }

    static void writeTableHeader(BufferedWriter writer, List row)
    {
        writeTableRow(writer, row)

        writeTableRow(writer, row.collect {"-------"})
    }

    static void writeTable(BufferedWriter writer, List list, @DelegatesTo(TableWriterDelegate) Closure closure)
    {
        def table = new TableWriterDelegate()
        closure.delegate = table
        closure()

        writeTableHeader(writer, table.header)

        if (list)
        {
            list.each { writeTableRow(writer, table.rowFor(it)) }
        }
        else
        {
            writeTableRow(writer, ['No rows'])
        }


    }

    static class TableWriterDelegate<T>
    {
        Closure headerClosure
        Closure rowClosure

        void header(@DelegatesTo(TableRowDelegate) Closure closure)
        {
            this.headerClosure = closure
        }

        public <T> void row(Class<T> rowClass, @DelegatesTo(TableRowDelegate) @ClosureParams(value = FromString, options = ['T']) Closure closure)
        {
            this.rowClosure = closure
        }

        List getHeader()
        {
            def row = new TableRowDelegate()
            headerClosure.delegate = row
            headerClosure()
            return row.row
        }

        List rowFor(Object o)
        {
            def rowDelegate = new TableRowDelegate()
            rowClosure.delegate = rowDelegate
            rowClosure(o)
            return rowDelegate.row
        }
    }

    static class TableRowDelegate
    {
        private List row = []

        void col(Object val)
        {
            row << val
        }

    }
}
