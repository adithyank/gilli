plugins {
    id 'groovy'
}

version = '0.1'

ext {
    buildType = 'ga' //beta

    DISTRIBUTION_DIR = project.buildDir.absolutePath + File.separator + 'gilli-dist' + File.separator + name
    VERSION_FILE = File.createTempFile('version', '.info')

    GROOVY_VERSION = '4.0.4'
    GRADLE_TASK_GROUP_GILLI_ACTIONS = 'actions-' + name

    GILLI_ANNOTATION_PROCESSING_ENABLED = false
}

rootProject.subprojects.each {println "subproject : $it"}

allprojects { oneProject ->
    apply plugin: 'groovy'
    apply plugin: 'java-library'

    sourceCompatibility = '19'
    targetCompatibility = '19'

    repositories {
        mavenCentral()
    }

    sourceSets {
        main {
            java {
                srcDirs = []
            }    // no source dirs for the java compiler
            groovy { srcDirs = ['src/main/java', 'src/main/groovy'] }  // compile everything in src/ with groovy
        }

        test {
            java {
                srcDirs = []
            }    // no source dirs for the java compiler
            groovy { srcDirs = ['src/test/java', 'src/test/groovy'] }  // compile everything in src/ with groovy
        }
    }

    compileGroovy {
        options.fork = true
        //options.forkOptions.memoryMaximumSize = "2g"
        options.incremental = true
    }

    compileTestGroovy {
        groovyOptions.fileExtensions += 'gilli'
    }

    dependencies {
        if (rootProject.GILLI_ANNOTATION_PROCESSING_ENABLED) {
            if (oneProject.name != 'gilli-pre')
                annotationProcessor project(':gilli-pre')
        }

        api (group: 'org.apache.groovy', name: 'groovy', version: rootProject.ext.GROOVY_VERSION)
        api (group: 'org.apache.groovy', name: 'groovy-json', version: rootProject.ext.GROOVY_VERSION)
        api (group: 'org.apache.groovy', name: 'groovy-xml', version: rootProject.ext.GROOVY_VERSION)

        api 'info.picocli:picocli-groovy:4.6.3'
        api (group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.1')
        api (group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.1')

        testImplementation(group: 'org.testng', name: 'testng', version: '6.8')
        api (group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.28')
        api (group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.28')
        api 'javax.activation:activation:1.1.1'
        //lib(group: 'io.github.classgraph', name: 'classgraph', version: '4.8.48')
    }

    test {
        // enable TestNG support (default is JUnit)
        useTestNG() {

            testLogging {

                showStandardStreams = true

                events "skipped", "failed", "standard_out", "standard_error"
                //events "passed", "skipped", "failed", "standard_out", "standard_error"

                afterSuite { desc, result ->
                    if (!desc.parent) // will match the outermost suite
                    {
                        println ""
                        println "==================================================================================="
                        println "webTest Test Results"
                        println "--------------------"
                        println "Test Results : Project          : $project.name"
                        println "Test Results : Overall Status   : $result.resultType"
                        println "Test Results : Total Tests      : $result.testCount"
                        println "Test Results : Successful Tests : $result.successfulTestCount"
                        println "Test Results : Failed Tests     : $result.failedTestCount"
                        println "Test Results : Skipped Tests    : $result.skippedTestCount"
                        println "==================================================================================="
                        println ""
                    }
                }
            }

        }
    }
}

task testGilli(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'gilli.tester.TestNgRunner'

    def a = []
    allprojects.each {a.addAll(it.sourceSets.test.allSource)}
    //a.each {println it.class}
    args a
}

dependencies
{
    implementation project(':gilli-cover')
}

task copyFiles(type: Copy) {
    List<Project> ps = []

    ps.addAll(subprojects)
    ps.add(project)

    println "copyFiles order : ${ps.collect {it.name}}"

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    into DISTRIBUTION_DIR

    ps.each { p ->

        into('') {
            from p.file('app')
        }

        //into('docs') {
        //    from p.tasks.groovydoc.outputs
        //}

        into('internal/lib/ext') {
            from p.configurations.compileClasspath
        }

        into('internal/lib/int') {
            from p.tasks.jar.outputs
        }
    }
}

task prepareVersionFile {
    doLast {
        def text = "Gilli version               : $version \n"
        text    += "Build Time                  : ${new Date()} + \n"
        text    += "Embedded Groovy Version     : $GROOVY_VERSION"

        VERSION_FILE.text = text
    }
}

jar {
    dependsOn prepareVersionFile

    into ('') {
        from VERSION_FILE
        rename VERSION_FILE.name, 'gilli-version.info'
    }
}

task beforeCompress(dependsOn: [copyFiles, /*groovydoc*/]) {
}

task compress(type: Zip, dependsOn: beforeCompress) {
    from DISTRIBUTION_DIR
    into project.name
}

task postBuild(type: JavaExec) {
    outputs.upToDateWhen { false }
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'gilli.cover.CoverMain'
    args project.projectDir
}

task createDistributions(dependsOn: [beforeCompress, postBuild]) {
    group = GRADLE_TASK_GROUP_GILLI_ACTIONS
    doLast {
        println "Build done !"
    }
}

assemble.dependsOn createDistributions
defaultTasks 'createDistributions'
println "Gradle Version : $gradle.gradleVersion"
